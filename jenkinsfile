pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    // Get the latest commit message
                    def commitMessage = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
                    echo "Commit message: ${commitMessage}"

                    // Set environment variables or flags based on the commit message
                    if (commitMessage.contains('[skip tests]')) {
                        env.SKIP_TESTS = 'true'
                    } else if (commitMessage.contains('[deploy]')) {
                        env.DEPLOY = 'true'
                    } else {
                        env.DEFAULT = 'true'
                    }
                }
            }
        }

        stage('Build') {
            when {
                expression { return env.DEFAULT == 'true' }
            }
            steps {
                echo 'Building the project...'
                // Your build steps here
            }
        }

        stage('Test') {
            when {
                allOf {
                    expression { return env.SKIP_TESTS != 'true' }
                    expression { return env.DEFAULT == 'true' }
                }
            }
            steps {
                echo 'Running tests...'
                // Your test steps here
            }
        }

        stage('Deploy') {
            when {
                expression { return env.DEPLOY == 'true' }
            }
            steps {
                echo 'Deploying the application...'
                // Your deploy steps here
            }
        }
    }
}
